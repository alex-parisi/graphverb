name: Graphverb Release

on:
  push:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-macos:
    runs-on: macos-13

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          brew install cmake ninja

      - name: Set up Code Signing Certificate
        run: |
          echo "$MACOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p "build" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "build" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain
          security find-identity -v -p codesigning build.keychain
        env:
          MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -G Ninja -B build -S .

      - name: Build
        run: cmake --build build --target Graphverb_All -j 6

      - name: Package and Sign
        run: |
          mkdir -p dist/macos

          echo "Signing standalone app..."
          codesign --deep --force --verbose --options runtime --timestamp \
            --sign "Developer ID Application: ScribeNow LLC (NY)" \
            build/Graphverb_artefacts/Release/Standalone/Graphverb.app

          echo "Signing VST3..."
          codesign --force --verbose --options runtime --timestamp \
            --sign "Developer ID Application: ScribeNow LLC (NY)" \
            ~/Library/Audio/Plug-Ins/VST3/Graphverb.vst3 || echo "VST3 signing skipped or failed"

          echo "Signing AU..."
          codesign --force --verbose --options runtime --timestamp \
            --sign "Developer ID Application: ScribeNow LLC (NY)" \
            ~/Library/Audio/Plug-Ins/Components/Graphverb.component || echo "AU signing skipped or failed"

          echo "Copying signed files..."
          cp -R ~/Library/Audio/Plug-Ins/VST3/Graphverb.vst3 dist/macos/ || true
          cp -R ~/Library/Audio/Plug-Ins/Components/Graphverb.component dist/macos/ || true
          cp -R build/Graphverb_artefacts/Release/Standalone/Graphverb.app dist/macos/ || true

          cd dist && zip -r Graphverb-macos.zip macos
          
          echo "Contents of ZIP:"
          unzip -l Graphverb-macos.zip

      - name: Notarize Plugin
        uses: GuillaumeFalourd/xcode-notarize@v1
        with:
          product-path: dist/Graphverb-macos.zip
          primary-bundle-id: com.scribenow.graphverb
          appstore-connect-username: ${{ secrets.APPLE_DEVELOPER_ID }}
          appstore-connect-password: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          verbose: true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Graphverb-macOS
          path: dist/Graphverb-macos.zip

      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain build.keychain  

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Ninja
        run: choco install ninja

      - name: Decode Certificate (.pfx)
        shell: pwsh
        run: |
          [System.IO.File]::WriteAllBytes("certificate.pfx", [Convert]::FromBase64String("${{ secrets.MACOS_CERTIFICATE_BASE64 }}"))

      - name: Set up MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure with MSVC
        run: cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" -B build -S .

      - name: Build
        run: cmake --build build --target Graphverb_All -j 6

      - name: Sign binaries
        run: |
          $certPassword = "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}"
          $filesToSign = Get-ChildItem -Recurse -Path build\Graphverb_artefacts\Release\ -Include *.exe, *.dll
          foreach ($file in $filesToSign) {
            & "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" sign /f certificate.pfx /p $certPassword /tr http://timestamp.digicert.com /td sha256 /fd sha256 "$($file.FullName)"
          }

      - name: Package
        run: |
          mkdir dist
          powershell Compress-Archive -Path build\Graphverb_artefacts\Release\* -DestinationPath dist\Graphverb-windows.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Graphverb-Windows
          path: dist\Graphverb-windows.zip

  build-linux:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            cmake ninja-build build-essential \
            libasound2-dev libjack-jackd2-dev \
            libx11-dev libfreetype6-dev libfontconfig1-dev \
            libgl1-mesa-dev libcurl4-openssl-dev \
            libxrandr-dev libxinerama-dev libxcursor-dev \
            libxcomposite-dev libxext-dev \
            libgtk2.0-dev

      - name: Configure
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_EXE_LINKER_FLAGS="-lcurl" \
                -G Ninja -B build -S .

      - name: Build
        run: cmake --build build --target Graphverb_All -j 6

      - name: Package
        run: |
          mkdir -p dist/linux
          cp -R build/Graphverb_artefacts/Release/* dist/linux/
          cd dist && zip -r Graphverb-linux.zip linux

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Graphverb-Linux
          path: dist/Graphverb-linux.zip
