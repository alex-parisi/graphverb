name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release

jobs:
  check-tag:
    runs-on: ubuntu-latest
    outputs:
      is_latest: ${{ steps.check_tag.outputs.is_latest }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch origin/main
        run: git fetch origin main

      - name: Ensure tag is on main
        id: check_tag
        run: |
          TAG_COMMIT=$(git rev-parse ${{ github.ref_name }})
          MAIN_COMMIT=$(git rev-parse origin/main)

          echo "Tag points to:     $TAG_COMMIT"
          echo "Main branch head:  $MAIN_COMMIT"

          if [ "$TAG_COMMIT" = "$MAIN_COMMIT" ]; then
            echo "✅ Tag points to latest commit on main."
            echo "is_latest=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Tag does not point to the latest commit on main."
            echo "is_latest=false" >> $GITHUB_OUTPUT
          fi

  build-macos:
    needs: check-tag
    if: needs.check-tag.outputs.is_latest == 'true'
    runs-on: macos-13

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          brew install cmake ninja
          brew install create-dmg

      - name: Set up Certificates
        run: |
          echo "$MACOS_APP_CERTIFICATE_BASE64" | base64 --decode > app_certificate.p12
          echo "$MACOS_INSTALLER_CERTIFICATE_BASE64" | base64 --decode > installer_certificate.p12

          security create-keychain -p "build" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "build" build.keychain
          security import app_certificate.p12 -k build.keychain -P "$MACOS_APP_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security import installer_certificate.p12 -k build.keychain -P "$MACOS_INSTALLER_CERTIFICATE_PASSWORD" -T /usr/bin/productsign
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain
        env:
          MACOS_APP_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          MACOS_APP_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          MACOS_INSTALLER_CERTIFICATE_BASE64: ${{ secrets.MACOS_INSTALLER_CERTIFICATE_BASE64 }}
          MACOS_INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_INSTALLER_CERTIFICATE_PASSWORD }}

      - name: Set Environment Variables
        run: |
          TAG_NAME=${{ github.ref_name }}
          echo "VERSION_NUMBER=${TAG_NAME#v}" >> $GITHUB_ENV
          BUNDLE_ID=$(sed -n 's/^set(JUCE_BUNDLE_ID[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)
          PRODUCT_NAME=$(sed -n 's/^set(JUCE_PRODUCT_NAME[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)
          TARGET_NAME=$(sed -n 's/^set(TARGET_NAME[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)
          
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$PRODUCT_NAME" >> $GITHUB_ENV
          echo "PRODUCT_NAME_U=${PRODUCT_NAME// /_}" >> $GITHUB_ENV
          echo "TARGET_NAME=$TARGET_NAME" >> $GITHUB_ENV

      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -G Ninja -B build -S .

      - name: Build
        run: cmake --build build --target ${{ env.TARGET_NAME }}_All -j

      - name: Sign Application
        run: |
          set -e
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain > /dev/null 2>&1
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain > /dev/null 2>&1

          echo "Signing main binary..."
          codesign --force --verbose --sign "$CERT_NAME" \
            --options runtime --timestamp \
            "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}.app/Contents/MacOS/${{ env.PRODUCT_NAME }}"

          echo "Signing full app bundle..."
          codesign --force --deep --verbose --sign "$CERT_NAME" \
            --options runtime --timestamp \
            "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}.app"

          echo "Verifying signature..."
          codesign --verify --deep --strict --verbose=4 "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}.app"

      - name: Sign VST3
        run: |
          set -e
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain > /dev/null 2>&1
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain > /dev/null 2>&1

          echo "Signing VST3..."
          codesign --force --deep --verbose --sign "$CERT_NAME" \
            --options runtime --timestamp \
            "build/${{ env.TARGET_NAME }}_artefacts/Release/VST3/${{ env.PRODUCT_NAME }}.vst3"

          echo "Verifying signature..."
          codesign --verify --deep --strict --verbose=4 "build/${{ env.TARGET_NAME }}_artefacts/Release/VST3/${{ env.PRODUCT_NAME }}.vst3"

      - name: Sign AU
        run: |
          set -e
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain > /dev/null 2>&1
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain > /dev/null 2>&1

          echo "Signing AU..."
          codesign --force --deep --verbose --sign "$CERT_NAME" \
            --options runtime --timestamp \
            "build/${{ env.TARGET_NAME }}_artefacts/Release/AU/${{ env.PRODUCT_NAME }}.component"

          echo "Verifying signature..."
          codesign --verify --deep --strict --verbose=4 "build/${{ env.TARGET_NAME }}_artefacts/Release/AU/${{ env.PRODUCT_NAME }}.component"

      - name: Prepare for pkgbuild
        run: |
          mkdir -p "pkg/${{ env.PRODUCT_NAME_U }}_Installer/Root/Library/Audio/Plug-Ins/VST3"
          mkdir -p "pkg/${{ env.PRODUCT_NAME_U }}_Installer/Root/Library/Audio/Plug-Ins/Components"
          
          cp -Rp "build/${{ env.TARGET_NAME }}_artefacts/Release/VST3/${{ env.PRODUCT_NAME }}.vst3" \
                "pkg/${{ env.PRODUCT_NAME_U }}_Installer/Root/Library/Audio/Plug-Ins/VST3/${{ env.PRODUCT_NAME_U }}.vst3"
          cp -Rp "build/${{ env.TARGET_NAME }}_artefacts/Release/AU/${{ env.PRODUCT_NAME }}.component" \
                "pkg/${{ env.PRODUCT_NAME_U }}_Installer/Root/Library/Audio/Plug-Ins/Components/${{ env.PRODUCT_NAME_U }}.component"

      - name: pkgbuild
        run: |
          pkgbuild \
          --root "pkg/${{ env.PRODUCT_NAME_U }}_Installer/Root/Library/Audio/Plug-Ins/VST3" \
          --install-location /Library/Audio/Plug-Ins/VST3 \
          --identifier ${{ env.BUNDLE_ID }}.vst3 \
          --version ${{ env.VERSION_NUMBER }} \
          "${{ env.PRODUCT_NAME_U }}_VST3_unsigned.pkg"
          pkgbuild \
          --root "pkg/${{ env.PRODUCT_NAME_U }}_Installer/Root/Library/Audio/Plug-Ins/Components" \
          --install-location /Library/Audio/Plug-Ins/Components \
          --identifier ${{ env.BUNDLE_ID }}.component \
          --version ${{ env.VERSION_NUMBER }} \
          "${{ env.PRODUCT_NAME_U }}_AU_unsigned.pkg"

      - name: Sign individual packages
        run: |
          set -e
          CERT_NAME=$(security find-identity -v build.keychain | grep "Developer ID Installer" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain > /dev/null 2>&1
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain > /dev/null 2>&1

          echo "Signing VST3 Installer..."
          productsign --sign "$CERT_NAME" \
          "${{ env.PRODUCT_NAME_U }}_VST3_unsigned.pkg" \
          "dist/${{ env.PRODUCT_NAME_U }}_VST3.pkg"

          echo "Verifying VST3 signature..."
          pkgutil --check-signature "dist/${{ env.PRODUCT_NAME_U }}_VST3.pkg"
          
          echo "Signing AU Installer..."
          productsign --sign "$CERT_NAME" \
          "${{ env.PRODUCT_NAME_U }}_AU_unsigned.pkg" \
          "dist/${{ env.PRODUCT_NAME_U }}_AU.pkg"

          echo "Verifying AU signature..."
          pkgutil --check-signature "dist/${{ env.PRODUCT_NAME_U }}_AU.pkg"

      - name: Notarize Individual Installers
        run: |
          xcrun notarytool submit "dist/${{ env.PRODUCT_NAME_U }}_VST3.pkg" \
            --apple-id "${{ secrets.APPLE_DEVELOPER_ID }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --wait --output-format json > vst3_installer_notarization_result.json
          xcrun notarytool submit "dist/${{ env.PRODUCT_NAME_U }}_AU.pkg" \
            --apple-id "${{ secrets.APPLE_DEVELOPER_ID }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --wait --output-format json > au_installer_notarization_result.json

      - name: Staple Notarization Tickets
        run: |
          xcrun stapler staple "dist/${{ env.PRODUCT_NAME_U }}_VST3.pkg"
          xcrun stapler staple "dist/${{ env.PRODUCT_NAME_U }}_AU.pkg"

      - name: Prepare for create-dmg
        run: |
          mkdir -p dmg_staging
          cp -Rp "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}.app" "dmg_staging/${{ env.PRODUCT_NAME }}.app"
          chmod +x "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}.app"
          ln -s /Applications dmg_staging/"Applications"

      - name: create-dmg
        run: |
          create-dmg \
          --volname "${{ env.PRODUCT_NAME }} Installer" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 96 \
          --icon "${{ env.PRODUCT_NAME }}.app" 80 200 \
          --icon "Applications" 300 200 \
          --hide-extension "${{ env.PRODUCT_NAME }}.app" \
          --app-drop-link 300 200 \
          "pkg/${{ env.PRODUCT_NAME_U }}_App.dmg" \
          dmg_staging/

      - name: Sign DMG
        run: |
          set -e
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain > /dev/null 2>&1
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain > /dev/null 2>&1

          echo "Signing DMG..."
          codesign --force --deep --verbose --sign "$CERT_NAME" \
            --options runtime --timestamp \
            "pkg/${{ env.PRODUCT_NAME_U }}_App.dmg"

          echo "Verifying signature..."
          codesign --verify --deep --strict --verbose=4 "pkg/${{ env.PRODUCT_NAME_U }}_App.dmg"

      - name: Notarize DMG
        run: |
          xcrun notarytool submit "pkg/${{ env.PRODUCT_NAME_U }}_App.dmg" \
            --apple-id "${{ secrets.APPLE_DEVELOPER_ID }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --wait --output-format json > app_installer_notarization_result.json

      - name: Staple Notarization Ticket
        run: |
          xcrun stapler staple "pkg/${{ env.PRODUCT_NAME_U }}_App.dmg"

      - name: Create postinstall script
        run: |
          mkdir -p dist/Scripts
          cat << 'EOF' > dist/Scripts/postinstall
          #!/bin/bash
          
          DMG_PATH="/Library/Application Support/${{ env.PRODUCT_NAME }}/${{ env.PRODUCT_NAME_U }}_App.dmg"
          
          /usr/bin/open "$DMG_PATH"
          
          exit 0
          EOF
          
          chmod +x dist/Scripts/postinstall

      - name: Prepare for productbuild
        run: |
          echo "Creating payload..."
          mkdir -p "dist/DmgPayload/Library/Application Support/${{ env.PRODUCT_NAME }}"
          cp "pkg/${{ env.PRODUCT_NAME_U }}_App.dmg" "dist/DmgPayload/Library/Application Support/${{ env.PRODUCT_NAME }}/"
          
          echo "Packaging..."
          pkgbuild \
          --root dist/DmgPayload \
          --scripts dist/Scripts \
          --install-location / \
          --identifier ${{ env.BUNDLE_ID }}.dmgpayload \
          --version ${{ env.VERSION_NUMBER }} \
          "pkg/${{ env.PRODUCT_NAME_U }}_DMG_unsigned.pkg"
          
          echo "Signing..."
          set -e
          CERT_NAME=$(security find-identity -v build.keychain | grep "Developer ID Installer" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain > /dev/null 2>&1
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain > /dev/null 2>&1
          productsign --sign "$CERT_NAME" \
          "pkg/${{ env.PRODUCT_NAME_U }}_DMG_unsigned.pkg" \
          "dist/${{ env.PRODUCT_NAME_U }}_DMG.pkg"
          pkgutil --check-signature "dist/${{ env.PRODUCT_NAME_U }}_DMG.pkg"
          
          echo "Notarizing..."
          xcrun notarytool submit "dist/${{ env.PRODUCT_NAME_U }}_DMG.pkg" \
            --apple-id "${{ secrets.APPLE_DEVELOPER_ID }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --wait --output-format json > dmg_installer_notarization_result.json
          
          echo "Stapling..."
          xcrun stapler staple "dist/${{ env.PRODUCT_NAME_U }}_DMG.pkg"

      - name: productbuild
        run: |
          cp LICENSE dist/Resources/license.txt
          ls -l
          productbuild \
          --distribution dist/distribution.xml \
          --resources dist/Resources \
          --package-path dist \
          "${{ env.PRODUCT_NAME_U }}_macOS_Unsigned.pkg"

      - name: Sign installer
        run: |
          set -e
          CERT_NAME=$(security find-identity -v build.keychain | grep "Developer ID Installer" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain > /dev/null 2>&1
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain > /dev/null 2>&1

          echo "Signing Installer..."
          productsign --sign "$CERT_NAME" \
          "${{ env.PRODUCT_NAME_U }}_macOS_Unsigned.pkg" \
          "${{ env.PRODUCT_NAME_U }}_macOS.pkg"

          echo "Verifying signature..."
          pkgutil --check-signature "${{ env.PRODUCT_NAME_U }}_macOS.pkg"

      - name: Notarize Installer
        run: |
          xcrun notarytool submit "${{ env.PRODUCT_NAME_U }}_macOS.pkg" \
            --apple-id "${{ secrets.APPLE_DEVELOPER_ID }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --wait --output-format json > notarization_result.json

      - name: Staple Notarization Ticket
        run: |
          xcrun stapler staple "${{ env.PRODUCT_NAME_U }}_macOS.pkg"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME_U }}-macOS
          path: ${{ env.PRODUCT_NAME_U }}_macOS.pkg

      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain build.keychain

  build-windows:
    needs: check-tag
    if: needs.check-tag.outputs.is_latest == 'true'
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Ninja
        run: choco install ninja

      - name: Set up MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set Environment Variables
        shell: pwsh
        run: |
          $TAG_NAME = "${{ github.ref_name }}"
          $VERSION_NUMBER = $TAG_NAME -replace '^v', ''

          $cmakeFile = Get-Content "CMakeLists.txt"

          $BUNDLE_ID = ($cmakeFile | Select-String 'set\(JUCE_BUNDLE_ID\s*"(.*?)"\)' | ForEach-Object { $_.Matches[0].Groups[1].Value }).Trim()
          $PRODUCT_NAME = ($cmakeFile | Select-String 'set\(JUCE_PRODUCT_NAME\s*"(.*?)"\)' | ForEach-Object { $_.Matches[0].Groups[1].Value }).Trim()
          $PRODUCT_NAME_U = $PRODUCT_NAME -replace ' ', '_'
          $TARGET_NAME = ($cmakeFile | Select-String 'set\(TARGET_NAME\s*"(.*?)"\)' | ForEach-Object { $_.Matches[0].Groups[1].Value }).Trim()

          "VERSION_NUMBER=$VERSION_NUMBER" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "BUNDLE_ID=$BUNDLE_ID" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "PRODUCT_NAME=$PRODUCT_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "PRODUCT_NAME_U=$PRODUCT_NAME_U" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "TARGET_NAME=$TARGET_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configure with MSVC
        run: cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" -B build -S .

      - name: Build
        run: cmake --build build --target ${{ env.TARGET_NAME }}_All -j

      - name: Package
        shell: pwsh
        run: |
          mkdir package
          copy "build\${{ env.TARGET_NAME }}_artefacts\Release\Standalone\${{ env.PRODUCT_NAME }}.exe" package\
          copy "build\${{ env.TARGET_NAME }}_artefacts\Release\VST3\${{ env.PRODUCT_NAME }}.vst3" package\
          $zipName = "${{ env.PRODUCT_NAME_U }}_windows.zip"
          Compress-Archive -Path package\* -DestinationPath "$zipName"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME_U }}-Windows
          path: ${{ env.PRODUCT_NAME_U }}_windows.zip

  build-linux:
    needs: check-tag
    if: needs.check-tag.outputs.is_latest == 'true'
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            cmake ninja-build build-essential \
            libasound2-dev libjack-jackd2-dev \
            libx11-dev libfreetype6-dev libfontconfig1-dev \
            libgl1-mesa-dev libcurl4-openssl-dev \
            libxrandr-dev libxinerama-dev libxcursor-dev \
            libxcomposite-dev libxext-dev \
            libgtk2.0-dev

      - name: Set Environment Variables
        run: |
          TAG_NAME=${{ github.ref_name }}
          echo "VERSION_NUMBER=${TAG_NAME#v}" >> $GITHUB_ENV
          BUNDLE_ID=$(sed -n 's/^set(JUCE_BUNDLE_ID[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)
          PRODUCT_NAME=$(sed -n 's/^set(JUCE_PRODUCT_NAME[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)
          TARGET_NAME=$(sed -n 's/^set(TARGET_NAME[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)

          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$PRODUCT_NAME" >> $GITHUB_ENV
          echo "PRODUCT_NAME_U=${PRODUCT_NAME// /_}" >> $GITHUB_ENV
          echo "TARGET_NAME=$TARGET_NAME" >> $GITHUB_ENV

      - name: Configure
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_EXE_LINKER_FLAGS="-lcurl" \
                -G Ninja -B build -S .

      - name: Build
        run: cmake --build build --target ${{ env.TARGET_NAME }}_All -j

      - name: Package
        run: |
          mkdir -p package
          cp -r "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}" package/
          cp -r "build/${{ env.TARGET_NAME }}_artefacts/Release/VST3/${{ env.PRODUCT_NAME }}.vst3" package/
          cd package && zip -r "../${{ env.PRODUCT_NAME_U }}_linux.zip" *

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME_U }}-Linux
          path: ${{ env.PRODUCT_NAME_U }}_linux.zip

  release:
    needs: [ build-macos, build-windows, build-linux ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update
        run: sudo apt update

      - name: Set Environment Variables
        run: |
          TAG_NAME=${{ github.ref_name }}
          echo "VERSION_NUMBER=${TAG_NAME#v}" >> $GITHUB_ENV
          BUNDLE_ID=$(sed -n 's/^set(JUCE_BUNDLE_ID[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)
          PRODUCT_NAME=$(sed -n 's/^set(JUCE_PRODUCT_NAME[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)
          TARGET_NAME=$(sed -n 's/^set(TARGET_NAME[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)

          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$PRODUCT_NAME" >> $GITHUB_ENV
          echo "PRODUCT_NAME_U=${PRODUCT_NAME// /_}" >> $GITHUB_ENV
          echo "TARGET_NAME=$TARGET_NAME" >> $GITHUB_ENV

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME_U }}-macOS
          path: artifacts/

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME_U }}-Windows
          path: artifacts/

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME_U }}-Linux
          path: artifacts/

      - name: Display downloaded files
        run: ls -R artifacts

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: |
            artifacts/${{ env.PRODUCT_NAME_U }}_macOS.pkg
            artifacts/${{ env.PRODUCT_NAME_U }}_windows.zip
            artifacts/${{ env.PRODUCT_NAME_U }}_linux.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
